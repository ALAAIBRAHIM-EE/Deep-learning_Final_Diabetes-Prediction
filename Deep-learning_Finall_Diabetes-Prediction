{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":482,"sourceType":"datasetVersion","datasetId":228}],"dockerImageVersionId":30786,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/alaaibrahim2222/deep-learning-final-diabetes-prediction?scriptVersionId=215464095\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"**IMPORT**","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom tensorflow.keras.models import Model,load_model\nfrom tensorflow.keras.layers import Input, Dense, Dropout, BatchNormalization\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping, LearningRateScheduler\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-22T19:13:53.420728Z","iopub.execute_input":"2024-12-22T19:13:53.421179Z","iopub.status.idle":"2024-12-22T19:13:53.4282Z","shell.execute_reply.started":"2024-12-22T19:13:53.421142Z","shell.execute_reply":"2024-12-22T19:13:53.426506Z"}},"outputs":[],"execution_count":53},{"cell_type":"code","source":"data = pd.read_csv(\"../input/pima-indians-diabetes-database/diabetes.csv\")\ndata.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-22T19:13:53.436008Z","iopub.execute_input":"2024-12-22T19:13:53.436497Z","iopub.status.idle":"2024-12-22T19:13:53.461727Z","shell.execute_reply.started":"2024-12-22T19:13:53.436447Z","shell.execute_reply":"2024-12-22T19:13:53.460479Z"}},"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n0            6      148             72             35        0  33.6   \n1            1       85             66             29        0  26.6   \n2            8      183             64              0        0  23.3   \n3            1       89             66             23       94  28.1   \n4            0      137             40             35      168  43.1   \n\n   DiabetesPedigreeFunction  Age  Outcome  \n0                     0.627   50        1  \n1                     0.351   31        0  \n2                     0.672   32        1  \n3                     0.167   21        0  \n4                     2.288   33        1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pregnancies</th>\n      <th>Glucose</th>\n      <th>BloodPressure</th>\n      <th>SkinThickness</th>\n      <th>Insulin</th>\n      <th>BMI</th>\n      <th>DiabetesPedigreeFunction</th>\n      <th>Age</th>\n      <th>Outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6</td>\n      <td>148</td>\n      <td>72</td>\n      <td>35</td>\n      <td>0</td>\n      <td>33.6</td>\n      <td>0.627</td>\n      <td>50</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>85</td>\n      <td>66</td>\n      <td>29</td>\n      <td>0</td>\n      <td>26.6</td>\n      <td>0.351</td>\n      <td>31</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8</td>\n      <td>183</td>\n      <td>64</td>\n      <td>0</td>\n      <td>0</td>\n      <td>23.3</td>\n      <td>0.672</td>\n      <td>32</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>89</td>\n      <td>66</td>\n      <td>23</td>\n      <td>94</td>\n      <td>28.1</td>\n      <td>0.167</td>\n      <td>21</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>137</td>\n      <td>40</td>\n      <td>35</td>\n      <td>168</td>\n      <td>43.1</td>\n      <td>2.288</td>\n      <td>33</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":54},{"cell_type":"markdown","source":"****Define feature columns and label****","metadata":{}},{"cell_type":"code","source":"feature_cols = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', \n                'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']\nX = data[feature_cols]  # Predictors (features)\ny = data['Outcome']     # Label (target variable)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-22T19:13:53.46392Z","iopub.execute_input":"2024-12-22T19:13:53.464445Z","iopub.status.idle":"2024-12-22T19:13:53.472586Z","shell.execute_reply.started":"2024-12-22T19:13:53.464366Z","shell.execute_reply":"2024-12-22T19:13:53.471163Z"}},"outputs":[],"execution_count":55},{"cell_type":"markdown","source":"**Normalize the features**","metadata":{}},{"cell_type":"code","source":"X_norm = X.apply(lambda x: (x - x.min()) / (x.max() - x.min()))\nX_norm.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-22T19:13:53.474108Z","iopub.execute_input":"2024-12-22T19:13:53.4746Z","iopub.status.idle":"2024-12-22T19:13:53.503697Z","shell.execute_reply.started":"2024-12-22T19:13:53.474545Z","shell.execute_reply":"2024-12-22T19:13:53.502519Z"}},"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"   Pregnancies   Glucose  BloodPressure  SkinThickness   Insulin       BMI  \\\n0     0.352941  0.743719       0.590164       0.353535  0.000000  0.500745   \n1     0.058824  0.427136       0.540984       0.292929  0.000000  0.396423   \n2     0.470588  0.919598       0.524590       0.000000  0.000000  0.347243   \n3     0.058824  0.447236       0.540984       0.232323  0.111111  0.418778   \n4     0.000000  0.688442       0.327869       0.353535  0.198582  0.642325   \n\n   DiabetesPedigreeFunction       Age  \n0                  0.234415  0.483333  \n1                  0.116567  0.166667  \n2                  0.253629  0.183333  \n3                  0.038002  0.000000  \n4                  0.943638  0.200000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pregnancies</th>\n      <th>Glucose</th>\n      <th>BloodPressure</th>\n      <th>SkinThickness</th>\n      <th>Insulin</th>\n      <th>BMI</th>\n      <th>DiabetesPedigreeFunction</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.352941</td>\n      <td>0.743719</td>\n      <td>0.590164</td>\n      <td>0.353535</td>\n      <td>0.000000</td>\n      <td>0.500745</td>\n      <td>0.234415</td>\n      <td>0.483333</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.058824</td>\n      <td>0.427136</td>\n      <td>0.540984</td>\n      <td>0.292929</td>\n      <td>0.000000</td>\n      <td>0.396423</td>\n      <td>0.116567</td>\n      <td>0.166667</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.470588</td>\n      <td>0.919598</td>\n      <td>0.524590</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.347243</td>\n      <td>0.253629</td>\n      <td>0.183333</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.058824</td>\n      <td>0.447236</td>\n      <td>0.540984</td>\n      <td>0.232323</td>\n      <td>0.111111</td>\n      <td>0.418778</td>\n      <td>0.038002</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.000000</td>\n      <td>0.688442</td>\n      <td>0.327869</td>\n      <td>0.353535</td>\n      <td>0.198582</td>\n      <td>0.642325</td>\n      <td>0.943638</td>\n      <td>0.200000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":56},{"cell_type":"markdown","source":"**Split data into training and test sets**","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X_norm, y, test_size=0.25, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-22T19:13:53.506092Z","iopub.execute_input":"2024-12-22T19:13:53.506499Z","iopub.status.idle":"2024-12-22T19:13:53.515109Z","shell.execute_reply.started":"2024-12-22T19:13:53.506459Z","shell.execute_reply":"2024-12-22T19:13:53.513904Z"}},"outputs":[],"execution_count":57},{"cell_type":"markdown","source":"**One-hot encode labels for training and testing sets**","metadata":{}},{"cell_type":"code","source":"\ny_train = to_categorical(y_train, num_classes=2)\ny_test = to_categorical(y_test, num_classes=2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-22T19:13:53.516779Z","iopub.execute_input":"2024-12-22T19:13:53.5172Z","iopub.status.idle":"2024-12-22T19:13:53.525469Z","shell.execute_reply.started":"2024-12-22T19:13:53.517156Z","shell.execute_reply":"2024-12-22T19:13:53.524Z"}},"outputs":[],"execution_count":58},{"cell_type":"markdown","source":"**Initialize the model**","metadata":{}},{"cell_type":"code","source":"inputs = Input(shape=(X_train.shape[1],))\n# Hidden layers\nx = Dense(128, activation='relu')(inputs)\nx = BatchNormalization()(x)\nx = Dropout(0.5)(x)\n\nx = Dense(64, activation='relu')(x)\nx = BatchNormalization()(x)\nx = Dropout(0.5)(x)\n\nx = Dense(32, activation='relu')(x)\nx = BatchNormalization()(x)\nx = Dropout(0.5)(x)\n\n# Output layer\noutputs = Dense(2, activation='softmax')(x)\n\n# Define the model\nmodel = Model(inputs=inputs, outputs=outputs)\n\n# Compile the model\noptimizer = Adam(learning_rate=0.005)\nmodel.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-22T19:13:53.527149Z","iopub.execute_input":"2024-12-22T19:13:53.527673Z","iopub.status.idle":"2024-12-22T19:13:53.611964Z","shell.execute_reply.started":"2024-12-22T19:13:53.527633Z","shell.execute_reply":"2024-12-22T19:13:53.610795Z"}},"outputs":[],"execution_count":59},{"cell_type":"markdown","source":"**Compile the model**","metadata":{}},{"cell_type":"code","source":"#model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-22T19:13:53.613357Z","iopub.execute_input":"2024-12-22T19:13:53.613838Z","iopub.status.idle":"2024-12-22T19:13:53.619573Z","shell.execute_reply.started":"2024-12-22T19:13:53.613786Z","shell.execute_reply":"2024-12-22T19:13:53.618346Z"}},"outputs":[],"execution_count":60},{"cell_type":"markdown","source":"**Define early stopping monitor**","metadata":{}},{"cell_type":"code","source":"early_stopping_monitor = EarlyStopping(patience=10)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-22T19:13:53.62105Z","iopub.execute_input":"2024-12-22T19:13:53.621508Z","iopub.status.idle":"2024-12-22T19:13:53.629809Z","shell.execute_reply.started":"2024-12-22T19:13:53.621459Z","shell.execute_reply":"2024-12-22T19:13:53.628345Z"}},"outputs":[],"execution_count":61},{"cell_type":"markdown","source":"**Train the model**","metadata":{}},{"cell_type":"code","source":"# Learning rate scheduler (reduce the learning rate after each epoch)\ndef lr_schedule(epoch):\n    return 0.008 * (0.7 ** (epoch // 5))\n\nlr_scheduler = LearningRateScheduler(lr_schedule)\n\n\n# Train the model\nmodel_training = model.fit(X_train, y_train, validation_split=0.7, epochs=200, \n                           callbacks=[early_stopping_monitor, lr_scheduler], verbose=1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-22T19:13:53.631172Z","iopub.execute_input":"2024-12-22T19:13:53.631547Z","iopub.status.idle":"2024-12-22T19:13:59.002677Z","shell.execute_reply.started":"2024-12-22T19:13:53.631509Z","shell.execute_reply":"2024-12-22T19:13:59.001498Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 59ms/step - accuracy: 0.5765 - loss: 1.1336 - val_accuracy: 0.6906 - val_loss: 0.6734 - learning_rate: 0.0080\nEpoch 2/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.6891 - loss: 0.8128 - val_accuracy: 0.6708 - val_loss: 0.6507 - learning_rate: 0.0080\nEpoch 3/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.6931 - loss: 0.7810 - val_accuracy: 0.6683 - val_loss: 0.6314 - learning_rate: 0.0080\nEpoch 4/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.8005 - loss: 0.5306 - val_accuracy: 0.6757 - val_loss: 0.6159 - learning_rate: 0.0080\nEpoch 5/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.7426 - loss: 0.5503 - val_accuracy: 0.6609 - val_loss: 0.6042 - learning_rate: 0.0080\nEpoch 6/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.7484 - loss: 0.5914 - val_accuracy: 0.6535 - val_loss: 0.5998 - learning_rate: 0.0056\nEpoch 7/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.8180 - loss: 0.4355 - val_accuracy: 0.6584 - val_loss: 0.5960 - learning_rate: 0.0056\nEpoch 8/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7998 - loss: 0.4708 - val_accuracy: 0.6584 - val_loss: 0.5939 - learning_rate: 0.0056\nEpoch 9/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.7681 - loss: 0.5087 - val_accuracy: 0.6733 - val_loss: 0.5929 - learning_rate: 0.0056\nEpoch 10/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.8028 - loss: 0.4892 - val_accuracy: 0.6807 - val_loss: 0.5917 - learning_rate: 0.0056\nEpoch 11/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.7883 - loss: 0.4474 - val_accuracy: 0.6906 - val_loss: 0.5903 - learning_rate: 0.0039\nEpoch 12/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.8056 - loss: 0.4594 - val_accuracy: 0.6856 - val_loss: 0.5897 - learning_rate: 0.0039\nEpoch 13/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.8401 - loss: 0.4150 - val_accuracy: 0.6782 - val_loss: 0.5894 - learning_rate: 0.0039\nEpoch 14/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.7580 - loss: 0.4415 - val_accuracy: 0.6782 - val_loss: 0.5875 - learning_rate: 0.0039\nEpoch 15/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.8094 - loss: 0.4393 - val_accuracy: 0.6757 - val_loss: 0.5851 - learning_rate: 0.0039\nEpoch 16/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.7472 - loss: 0.4813 - val_accuracy: 0.6683 - val_loss: 0.5835 - learning_rate: 0.0027\nEpoch 17/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.8542 - loss: 0.4068 - val_accuracy: 0.6584 - val_loss: 0.5830 - learning_rate: 0.0027\nEpoch 18/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.8033 - loss: 0.4029 - val_accuracy: 0.6584 - val_loss: 0.5840 - learning_rate: 0.0027\nEpoch 19/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.7872 - loss: 0.4234 - val_accuracy: 0.6584 - val_loss: 0.5861 - learning_rate: 0.0027\nEpoch 20/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.8351 - loss: 0.3989 - val_accuracy: 0.6460 - val_loss: 0.5920 - learning_rate: 0.0027\nEpoch 21/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.8389 - loss: 0.3794 - val_accuracy: 0.6460 - val_loss: 0.5937 - learning_rate: 0.0019\nEpoch 22/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.8473 - loss: 0.3475 - val_accuracy: 0.6460 - val_loss: 0.5957 - learning_rate: 0.0019\nEpoch 23/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.8625 - loss: 0.3778 - val_accuracy: 0.6436 - val_loss: 0.5973 - learning_rate: 0.0019\nEpoch 24/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.7977 - loss: 0.4194 - val_accuracy: 0.6411 - val_loss: 0.5981 - learning_rate: 0.0019\nEpoch 25/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7980 - loss: 0.4782 - val_accuracy: 0.6411 - val_loss: 0.5994 - learning_rate: 0.0019\nEpoch 26/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.8368 - loss: 0.3751 - val_accuracy: 0.6436 - val_loss: 0.5984 - learning_rate: 0.0013\nEpoch 27/200\n\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.8646 - loss: 0.3960 - val_accuracy: 0.6436 - val_loss: 0.5985 - learning_rate: 0.0013\n","output_type":"stream"}],"execution_count":62},{"cell_type":"markdown","source":"**Visualize training and validation loss**","metadata":{}},{"cell_type":"code","source":"# Plot training and validation loss\nplt.plot(model_training.history['val_loss'], 'r', label='Validation Loss')\nplt.plot(model_training.history['loss'], 'b', label='Training Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('Training and Validation Loss')\nplt.xticks(np.arange(0, len(model_training.history['loss']), step=2))\nplt.legend()\nplt.grid()\nplt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-22T19:13:59.006817Z","iopub.execute_input":"2024-12-22T19:13:59.007316Z","iopub.status.idle":"2024-12-22T19:13:59.338878Z","shell.execute_reply.started":"2024-12-22T19:13:59.007265Z","shell.execute_reply":"2024-12-22T19:13:59.337727Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":63},{"cell_type":"markdown","source":"**Save the trained model**","metadata":{}},{"cell_type":"code","source":"model.save('Diabetes_model.h5')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-22T19:13:59.34038Z","iopub.execute_input":"2024-12-22T19:13:59.34074Z","iopub.status.idle":"2024-12-22T19:13:59.384002Z","shell.execute_reply.started":"2024-12-22T19:13:59.340706Z","shell.execute_reply":"2024-12-22T19:13:59.382843Z"}},"outputs":[],"execution_count":64},{"cell_type":"markdown","source":"**Load the saved model**","metadata":{}},{"cell_type":"code","source":"model = load_model('Diabetes_model.h5')\nmodel.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-22T19:13:59.385496Z","iopub.execute_input":"2024-12-22T19:13:59.385985Z","iopub.status.idle":"2024-12-22T19:13:59.50148Z","shell.execute_reply.started":"2024-12-22T19:13:59.385853Z","shell.execute_reply":"2024-12-22T19:13:59.500258Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_9\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_9\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_4 (\u001b[38;5;33mInputLayer\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)              │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_16 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │         \u001b[38;5;34m1,152\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_12          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │           \u001b[38;5;34m512\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_12 (\u001b[38;5;33mDropout\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_17 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_13          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │           \u001b[38;5;34m256\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_13 (\u001b[38;5;33mDropout\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_18 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │         \u001b[38;5;34m2,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_14          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │           \u001b[38;5;34m128\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_14 (\u001b[38;5;33mDropout\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_19 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)              │            \u001b[38;5;34m66\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_16 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,152</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_12          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_17 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_13          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_13 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_18 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_14          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_14 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_19 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">66</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m12,452\u001b[0m (48.64 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,452</span> (48.64 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m12,002\u001b[0m (46.88 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,002</span> (46.88 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m448\u001b[0m (1.75 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">448</span> (1.75 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Optimizer params: \u001b[0m\u001b[38;5;34m2\u001b[0m (12.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2</span> (12.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":65},{"cell_type":"markdown","source":"**Make predictions on the test set**","metadata":{}},{"cell_type":"code","source":"# Make predictions on the test set\npredictions = model.predict(X_test)\n\n# Display the probabilities for class \"1\" (indicating diabetic)\nprint(predictions[:, 1])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-22T19:13:59.502921Z","iopub.execute_input":"2024-12-22T19:13:59.503267Z","iopub.status.idle":"2024-12-22T19:13:59.681371Z","shell.execute_reply.started":"2024-12-22T19:13:59.503235Z","shell.execute_reply":"2024-12-22T19:13:59.680304Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step  \n[0.22586843 0.18604589 0.16778903 0.19238827 0.28371608 0.26998687\n 0.13478915 0.21439822 0.33983696 0.33609396 0.22737455 0.47732958\n 0.26440448 0.22524767 0.16244303 0.26472065 0.17006262 0.15586545\n 0.3315109  0.25756258 0.21831338 0.1760155  0.28311786 0.16176824\n 0.28568244 0.4594003  0.18945952 0.17047401 0.18959786 0.19366547\n 0.4121412  0.35185435 0.41421017 0.2951508  0.27928764 0.36864945\n 0.59079474 0.2626964  0.2667007  0.247118   0.1576251  0.27560228\n 0.28197324 0.19827585 0.15006438 0.3481011  0.31710476 0.1877258\n 0.21938188 0.4671156  0.15011428 0.37377402 0.38756186 0.21308227\n 0.1951909  0.1451132  0.34322405 0.11208807 0.24082668 0.32822934\n 0.3755427  0.22842662 0.27249694 0.18410067 0.16199197 0.32497817\n 0.15205303 0.28681085 0.17956144 0.34898955 0.36541507 0.17273673\n 0.19225371 0.17709124 0.16984694 0.32073754 0.22499791 0.20241632\n 0.18972813 0.19381776 0.3057356  0.18313678 0.16639048 0.28126788\n 0.20370173 0.4186202  0.38865274 0.25901306 0.1856661  0.15734911\n 0.15992497 0.17527607 0.10691148 0.22390892 0.23582952 0.32783344\n 0.20004874 0.16339238 0.30198243 0.15915331 0.42189816 0.1553847\n 0.26706824 0.2983587  0.3112437  0.2251905  0.26689327 0.42029375\n 0.19226834 0.28177467 0.16224894 0.28983235 0.13682298 0.4377781\n 0.20092577 0.22174703 0.36478037 0.18920134 0.1565262  0.229084\n 0.16251475 0.22246067 0.23526722 0.17366636 0.23181865 0.27657816\n 0.15591528 0.41239128 0.34440672 0.4641927  0.3629741  0.39782348\n 0.16737352 0.31135708 0.40724656 0.18624379 0.17660934 0.3400373\n 0.3834059  0.13672636 0.18110391 0.15701146 0.23325479 0.2265761\n 0.17159277 0.19881001 0.18773481 0.13866659 0.25915495 0.35335922\n 0.17654897 0.21945801 0.27351707 0.19632143 0.11294597 0.26674616\n 0.23227672 0.31981474 0.33567777 0.19934931 0.23093401 0.3554101\n 0.19776428 0.1391047  0.16508125 0.33147144 0.15183282 0.2704947\n 0.39778203 0.25212714 0.30516204 0.19297831 0.2204205  0.25590596\n 0.34179354 0.18782026 0.22169557 0.23799664 0.22414713 0.25137845\n 0.31323066 0.30596918 0.20253266 0.327742   0.31988752 0.17067818\n 0.15093134 0.16961585 0.4213504  0.29268295 0.15202914 0.17608142]\n","output_type":"stream"}],"execution_count":66}]}