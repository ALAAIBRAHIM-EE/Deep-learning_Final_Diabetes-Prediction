{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1a140946",
   "metadata": {
    "papermill": {
     "duration": 0.005431,
     "end_time": "2024-12-22T19:14:24.315820",
     "exception": false,
     "start_time": "2024-12-22T19:14:24.310389",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**IMPORT**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b8cd9483",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-12-22T19:14:24.327039Z",
     "iopub.status.busy": "2024-12-22T19:14:24.326592Z",
     "iopub.status.idle": "2024-12-22T19:14:39.575825Z",
     "shell.execute_reply": "2024-12-22T19:14:39.574842Z"
    },
    "papermill": {
     "duration": 15.257693,
     "end_time": "2024-12-22T19:14:39.578243",
     "exception": false,
     "start_time": "2024-12-22T19:14:24.320550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from tensorflow.keras.models import Model,load_model\n",
    "from tensorflow.keras.layers import Input, Dense, Dropout, BatchNormalization\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.callbacks import EarlyStopping, LearningRateScheduler\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "525eb42a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-22T19:14:39.588953Z",
     "iopub.status.busy": "2024-12-22T19:14:39.588365Z",
     "iopub.status.idle": "2024-12-22T19:14:39.621128Z",
     "shell.execute_reply": "2024-12-22T19:14:39.620161Z"
    },
    "papermill": {
     "duration": 0.040256,
     "end_time": "2024-12-22T19:14:39.623175",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.582919",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0            6      148             72             35        0  33.6   \n",
       "1            1       85             66             29        0  26.6   \n",
       "2            8      183             64              0        0  23.3   \n",
       "3            1       89             66             23       94  28.1   \n",
       "4            0      137             40             35      168  43.1   \n",
       "\n",
       "   DiabetesPedigreeFunction  Age  Outcome  \n",
       "0                     0.627   50        1  \n",
       "1                     0.351   31        0  \n",
       "2                     0.672   32        1  \n",
       "3                     0.167   21        0  \n",
       "4                     2.288   33        1  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv(\"../input/pima-indians-diabetes-database/diabetes.csv\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89e96983",
   "metadata": {
    "papermill": {
     "duration": 0.00469,
     "end_time": "2024-12-22T19:14:39.632783",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.628093",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "****Define feature columns and label****"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c7bfa232",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-22T19:14:39.643417Z",
     "iopub.status.busy": "2024-12-22T19:14:39.643050Z",
     "iopub.status.idle": "2024-12-22T19:14:39.656126Z",
     "shell.execute_reply": "2024-12-22T19:14:39.655286Z"
    },
    "papermill": {
     "duration": 0.020807,
     "end_time": "2024-12-22T19:14:39.658006",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.637199",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "feature_cols = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', \n",
    "                'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']\n",
    "X = data[feature_cols]  # Predictors (features)\n",
    "y = data['Outcome']     # Label (target variable)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44850593",
   "metadata": {
    "papermill": {
     "duration": 0.004402,
     "end_time": "2024-12-22T19:14:39.668176",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.663774",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Normalize the features**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "41f05f7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-22T19:14:39.678400Z",
     "iopub.status.busy": "2024-12-22T19:14:39.678014Z",
     "iopub.status.idle": "2024-12-22T19:14:39.696044Z",
     "shell.execute_reply": "2024-12-22T19:14:39.695076Z"
    },
    "papermill": {
     "duration": 0.025129,
     "end_time": "2024-12-22T19:14:39.697766",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.672637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.352941</td>\n",
       "      <td>0.743719</td>\n",
       "      <td>0.590164</td>\n",
       "      <td>0.353535</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500745</td>\n",
       "      <td>0.234415</td>\n",
       "      <td>0.483333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.058824</td>\n",
       "      <td>0.427136</td>\n",
       "      <td>0.540984</td>\n",
       "      <td>0.292929</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.396423</td>\n",
       "      <td>0.116567</td>\n",
       "      <td>0.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.470588</td>\n",
       "      <td>0.919598</td>\n",
       "      <td>0.524590</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.347243</td>\n",
       "      <td>0.253629</td>\n",
       "      <td>0.183333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.058824</td>\n",
       "      <td>0.447236</td>\n",
       "      <td>0.540984</td>\n",
       "      <td>0.232323</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.418778</td>\n",
       "      <td>0.038002</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.688442</td>\n",
       "      <td>0.327869</td>\n",
       "      <td>0.353535</td>\n",
       "      <td>0.198582</td>\n",
       "      <td>0.642325</td>\n",
       "      <td>0.943638</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies   Glucose  BloodPressure  SkinThickness   Insulin       BMI  \\\n",
       "0     0.352941  0.743719       0.590164       0.353535  0.000000  0.500745   \n",
       "1     0.058824  0.427136       0.540984       0.292929  0.000000  0.396423   \n",
       "2     0.470588  0.919598       0.524590       0.000000  0.000000  0.347243   \n",
       "3     0.058824  0.447236       0.540984       0.232323  0.111111  0.418778   \n",
       "4     0.000000  0.688442       0.327869       0.353535  0.198582  0.642325   \n",
       "\n",
       "   DiabetesPedigreeFunction       Age  \n",
       "0                  0.234415  0.483333  \n",
       "1                  0.116567  0.166667  \n",
       "2                  0.253629  0.183333  \n",
       "3                  0.038002  0.000000  \n",
       "4                  0.943638  0.200000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_norm = X.apply(lambda x: (x - x.min()) / (x.max() - x.min()))\n",
    "X_norm.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f67877a",
   "metadata": {
    "papermill": {
     "duration": 0.004457,
     "end_time": "2024-12-22T19:14:39.707057",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.702600",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Split data into training and test sets**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6c69093c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-22T19:14:39.717808Z",
     "iopub.status.busy": "2024-12-22T19:14:39.717367Z",
     "iopub.status.idle": "2024-12-22T19:14:39.725754Z",
     "shell.execute_reply": "2024-12-22T19:14:39.724979Z"
    },
    "papermill": {
     "duration": 0.016035,
     "end_time": "2024-12-22T19:14:39.727677",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.711642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X_norm, y, test_size=0.25, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "519dc617",
   "metadata": {
    "papermill": {
     "duration": 0.004456,
     "end_time": "2024-12-22T19:14:39.736846",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.732390",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**One-hot encode labels for training and testing sets**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1fb1f6c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-22T19:14:39.748363Z",
     "iopub.status.busy": "2024-12-22T19:14:39.747496Z",
     "iopub.status.idle": "2024-12-22T19:14:39.752548Z",
     "shell.execute_reply": "2024-12-22T19:14:39.751876Z"
    },
    "papermill": {
     "duration": 0.012806,
     "end_time": "2024-12-22T19:14:39.754485",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.741679",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "y_train = to_categorical(y_train, num_classes=2)\n",
    "y_test = to_categorical(y_test, num_classes=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8748a445",
   "metadata": {
    "papermill": {
     "duration": 0.004785,
     "end_time": "2024-12-22T19:14:39.764043",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.759258",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Initialize the model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "216c1e2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-22T19:14:39.775203Z",
     "iopub.status.busy": "2024-12-22T19:14:39.774843Z",
     "iopub.status.idle": "2024-12-22T19:14:39.911657Z",
     "shell.execute_reply": "2024-12-22T19:14:39.910653Z"
    },
    "papermill": {
     "duration": 0.145358,
     "end_time": "2024-12-22T19:14:39.914124",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.768766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "inputs = Input(shape=(X_train.shape[1],))\n",
    "# Hidden layers\n",
    "x = Dense(128, activation='relu')(inputs)\n",
    "x = BatchNormalization()(x)\n",
    "x = Dropout(0.5)(x)\n",
    "\n",
    "x = Dense(64, activation='relu')(x)\n",
    "x = BatchNormalization()(x)\n",
    "x = Dropout(0.5)(x)\n",
    "\n",
    "x = Dense(32, activation='relu')(x)\n",
    "x = BatchNormalization()(x)\n",
    "x = Dropout(0.5)(x)\n",
    "\n",
    "# Output layer\n",
    "outputs = Dense(2, activation='softmax')(x)\n",
    "\n",
    "# Define the model\n",
    "model = Model(inputs=inputs, outputs=outputs)\n",
    "\n",
    "# Compile the model\n",
    "optimizer = Adam(learning_rate=0.005)\n",
    "model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f99e74c",
   "metadata": {
    "papermill": {
     "duration": 0.004893,
     "end_time": "2024-12-22T19:14:39.924166",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.919273",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Compile the model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2001becf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-22T19:14:39.936000Z",
     "iopub.status.busy": "2024-12-22T19:14:39.934915Z",
     "iopub.status.idle": "2024-12-22T19:14:39.939626Z",
     "shell.execute_reply": "2024-12-22T19:14:39.938815Z"
    },
    "papermill": {
     "duration": 0.012713,
     "end_time": "2024-12-22T19:14:39.941672",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.928959",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14a0c719",
   "metadata": {
    "papermill": {
     "duration": 0.004594,
     "end_time": "2024-12-22T19:14:39.951142",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.946548",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Define early stopping monitor**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "20344f93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-22T19:14:39.962071Z",
     "iopub.status.busy": "2024-12-22T19:14:39.961698Z",
     "iopub.status.idle": "2024-12-22T19:14:39.966087Z",
     "shell.execute_reply": "2024-12-22T19:14:39.965260Z"
    },
    "papermill": {
     "duration": 0.012071,
     "end_time": "2024-12-22T19:14:39.967827",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.955756",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "early_stopping_monitor = EarlyStopping(patience=10)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2708177",
   "metadata": {
    "papermill": {
     "duration": 0.00479,
     "end_time": "2024-12-22T19:14:39.977345",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.972555",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Train the model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e47ecd10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-22T19:14:39.988228Z",
     "iopub.status.busy": "2024-12-22T19:14:39.987879Z",
     "iopub.status.idle": "2024-12-22T19:14:49.872168Z",
     "shell.execute_reply": "2024-12-22T19:14:49.871371Z"
    },
    "papermill": {
     "duration": 9.892255,
     "end_time": "2024-12-22T19:14:49.874334",
     "exception": false,
     "start_time": "2024-12-22T19:14:39.982079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 51ms/step - accuracy: 0.5352 - loss: 1.4995 - val_accuracy: 0.6460 - val_loss: 0.6566 - learning_rate: 0.0080\n",
      "Epoch 2/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.6716 - loss: 0.7845 - val_accuracy: 0.6535 - val_loss: 0.6419 - learning_rate: 0.0080\n",
      "Epoch 3/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7466 - loss: 0.6731 - val_accuracy: 0.6658 - val_loss: 0.6302 - learning_rate: 0.0080\n",
      "Epoch 4/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7177 - loss: 0.5888 - val_accuracy: 0.6807 - val_loss: 0.6163 - learning_rate: 0.0080\n",
      "Epoch 5/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7379 - loss: 0.6605 - val_accuracy: 0.6856 - val_loss: 0.6095 - learning_rate: 0.0080\n",
      "Epoch 6/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.6766 - loss: 0.6755 - val_accuracy: 0.6733 - val_loss: 0.6059 - learning_rate: 0.0056\n",
      "Epoch 7/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7988 - loss: 0.5476 - val_accuracy: 0.6535 - val_loss: 0.6056 - learning_rate: 0.0056\n",
      "Epoch 8/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7619 - loss: 0.5394 - val_accuracy: 0.6436 - val_loss: 0.6068 - learning_rate: 0.0056\n",
      "Epoch 9/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8257 - loss: 0.4034 - val_accuracy: 0.6485 - val_loss: 0.6051 - learning_rate: 0.0056\n",
      "Epoch 10/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7747 - loss: 0.4844 - val_accuracy: 0.6609 - val_loss: 0.6006 - learning_rate: 0.0056\n",
      "Epoch 11/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7716 - loss: 0.5096 - val_accuracy: 0.6584 - val_loss: 0.5975 - learning_rate: 0.0039\n",
      "Epoch 12/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8126 - loss: 0.4212 - val_accuracy: 0.6609 - val_loss: 0.5948 - learning_rate: 0.0039\n",
      "Epoch 13/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7461 - loss: 0.4898 - val_accuracy: 0.6683 - val_loss: 0.5917 - learning_rate: 0.0039\n",
      "Epoch 14/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8329 - loss: 0.4153 - val_accuracy: 0.6708 - val_loss: 0.5902 - learning_rate: 0.0039\n",
      "Epoch 15/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8194 - loss: 0.3770 - val_accuracy: 0.6708 - val_loss: 0.5883 - learning_rate: 0.0039\n",
      "Epoch 16/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8062 - loss: 0.4479 - val_accuracy: 0.6757 - val_loss: 0.5861 - learning_rate: 0.0027\n",
      "Epoch 17/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7990 - loss: 0.4028 - val_accuracy: 0.6733 - val_loss: 0.5851 - learning_rate: 0.0027\n",
      "Epoch 18/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8139 - loss: 0.3990 - val_accuracy: 0.6708 - val_loss: 0.5837 - learning_rate: 0.0027\n",
      "Epoch 19/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8451 - loss: 0.3959 - val_accuracy: 0.6708 - val_loss: 0.5815 - learning_rate: 0.0027\n",
      "Epoch 20/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7702 - loss: 0.4926 - val_accuracy: 0.6708 - val_loss: 0.5803 - learning_rate: 0.0027\n",
      "Epoch 21/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8602 - loss: 0.3617 - val_accuracy: 0.6733 - val_loss: 0.5784 - learning_rate: 0.0019\n",
      "Epoch 22/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8297 - loss: 0.4152 - val_accuracy: 0.6733 - val_loss: 0.5766 - learning_rate: 0.0019\n",
      "Epoch 23/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8329 - loss: 0.4269 - val_accuracy: 0.6733 - val_loss: 0.5756 - learning_rate: 0.0019\n",
      "Epoch 24/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8135 - loss: 0.4058 - val_accuracy: 0.6733 - val_loss: 0.5732 - learning_rate: 0.0019\n",
      "Epoch 25/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8606 - loss: 0.3863 - val_accuracy: 0.6733 - val_loss: 0.5724 - learning_rate: 0.0019\n",
      "Epoch 26/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8384 - loss: 0.3781 - val_accuracy: 0.6733 - val_loss: 0.5721 - learning_rate: 0.0013\n",
      "Epoch 27/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8278 - loss: 0.3693 - val_accuracy: 0.6733 - val_loss: 0.5727 - learning_rate: 0.0013\n",
      "Epoch 28/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7933 - loss: 0.4298 - val_accuracy: 0.6733 - val_loss: 0.5730 - learning_rate: 0.0013\n",
      "Epoch 29/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8459 - loss: 0.3695 - val_accuracy: 0.6733 - val_loss: 0.5721 - learning_rate: 0.0013\n",
      "Epoch 30/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8241 - loss: 0.3843 - val_accuracy: 0.6733 - val_loss: 0.5698 - learning_rate: 0.0013\n",
      "Epoch 31/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7959 - loss: 0.4378 - val_accuracy: 0.6757 - val_loss: 0.5684 - learning_rate: 9.4119e-04\n",
      "Epoch 32/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8292 - loss: 0.3403 - val_accuracy: 0.6832 - val_loss: 0.5660 - learning_rate: 9.4119e-04\n",
      "Epoch 33/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8250 - loss: 0.3885 - val_accuracy: 0.6906 - val_loss: 0.5634 - learning_rate: 9.4119e-04\n",
      "Epoch 34/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8353 - loss: 0.4085 - val_accuracy: 0.6906 - val_loss: 0.5604 - learning_rate: 9.4119e-04\n",
      "Epoch 35/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8334 - loss: 0.4115 - val_accuracy: 0.6881 - val_loss: 0.5583 - learning_rate: 9.4119e-04\n",
      "Epoch 36/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8534 - loss: 0.3494 - val_accuracy: 0.6931 - val_loss: 0.5567 - learning_rate: 6.5883e-04\n",
      "Epoch 37/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8392 - loss: 0.3740 - val_accuracy: 0.6955 - val_loss: 0.5551 - learning_rate: 6.5883e-04\n",
      "Epoch 38/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7945 - loss: 0.4131 - val_accuracy: 0.6980 - val_loss: 0.5535 - learning_rate: 6.5883e-04\n",
      "Epoch 39/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7918 - loss: 0.3894 - val_accuracy: 0.6980 - val_loss: 0.5520 - learning_rate: 6.5883e-04\n",
      "Epoch 40/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8304 - loss: 0.3795 - val_accuracy: 0.6980 - val_loss: 0.5504 - learning_rate: 6.5883e-04\n",
      "Epoch 41/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7835 - loss: 0.4314 - val_accuracy: 0.6955 - val_loss: 0.5481 - learning_rate: 4.6118e-04\n",
      "Epoch 42/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8453 - loss: 0.3352 - val_accuracy: 0.6881 - val_loss: 0.5460 - learning_rate: 4.6118e-04\n",
      "Epoch 43/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8158 - loss: 0.3782 - val_accuracy: 0.6906 - val_loss: 0.5435 - learning_rate: 4.6118e-04\n",
      "Epoch 44/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8614 - loss: 0.3324 - val_accuracy: 0.7005 - val_loss: 0.5409 - learning_rate: 4.6118e-04\n",
      "Epoch 45/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8284 - loss: 0.3607 - val_accuracy: 0.7054 - val_loss: 0.5388 - learning_rate: 4.6118e-04\n",
      "Epoch 46/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8170 - loss: 0.4269 - val_accuracy: 0.7104 - val_loss: 0.5371 - learning_rate: 3.2283e-04\n",
      "Epoch 47/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8342 - loss: 0.3568 - val_accuracy: 0.7079 - val_loss: 0.5348 - learning_rate: 3.2283e-04\n",
      "Epoch 48/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8234 - loss: 0.4162 - val_accuracy: 0.7129 - val_loss: 0.5332 - learning_rate: 3.2283e-04\n",
      "Epoch 49/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8281 - loss: 0.3918 - val_accuracy: 0.7129 - val_loss: 0.5316 - learning_rate: 3.2283e-04\n",
      "Epoch 50/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8500 - loss: 0.3821 - val_accuracy: 0.7153 - val_loss: 0.5298 - learning_rate: 3.2283e-04\n",
      "Epoch 51/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8985 - loss: 0.3016 - val_accuracy: 0.7178 - val_loss: 0.5287 - learning_rate: 2.2598e-04\n",
      "Epoch 52/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8415 - loss: 0.4119 - val_accuracy: 0.7228 - val_loss: 0.5273 - learning_rate: 2.2598e-04\n",
      "Epoch 53/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8364 - loss: 0.3418 - val_accuracy: 0.7277 - val_loss: 0.5256 - learning_rate: 2.2598e-04\n",
      "Epoch 54/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8755 - loss: 0.3630 - val_accuracy: 0.7302 - val_loss: 0.5239 - learning_rate: 2.2598e-04\n",
      "Epoch 55/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8449 - loss: 0.3527 - val_accuracy: 0.7302 - val_loss: 0.5229 - learning_rate: 2.2598e-04\n",
      "Epoch 56/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8292 - loss: 0.3934 - val_accuracy: 0.7327 - val_loss: 0.5218 - learning_rate: 1.5819e-04\n",
      "Epoch 57/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8654 - loss: 0.3826 - val_accuracy: 0.7327 - val_loss: 0.5205 - learning_rate: 1.5819e-04\n",
      "Epoch 58/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8474 - loss: 0.3588 - val_accuracy: 0.7327 - val_loss: 0.5194 - learning_rate: 1.5819e-04\n",
      "Epoch 59/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8590 - loss: 0.3368 - val_accuracy: 0.7327 - val_loss: 0.5179 - learning_rate: 1.5819e-04\n",
      "Epoch 60/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8022 - loss: 0.3660 - val_accuracy: 0.7302 - val_loss: 0.5160 - learning_rate: 1.5819e-04\n",
      "Epoch 61/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8051 - loss: 0.3627 - val_accuracy: 0.7277 - val_loss: 0.5148 - learning_rate: 1.1073e-04\n",
      "Epoch 62/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8628 - loss: 0.3592 - val_accuracy: 0.7277 - val_loss: 0.5139 - learning_rate: 1.1073e-04\n",
      "Epoch 63/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8279 - loss: 0.3389 - val_accuracy: 0.7277 - val_loss: 0.5131 - learning_rate: 1.1073e-04\n",
      "Epoch 64/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7650 - loss: 0.4167 - val_accuracy: 0.7277 - val_loss: 0.5120 - learning_rate: 1.1073e-04\n",
      "Epoch 65/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8710 - loss: 0.3330 - val_accuracy: 0.7302 - val_loss: 0.5109 - learning_rate: 1.1073e-04\n",
      "Epoch 66/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.8314 - loss: 0.3352 - val_accuracy: 0.7327 - val_loss: 0.5103 - learning_rate: 7.7511e-05\n",
      "Epoch 67/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.8403 - loss: 0.3616 - val_accuracy: 0.7351 - val_loss: 0.5094 - learning_rate: 7.7511e-05\n",
      "Epoch 68/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.8222 - loss: 0.4088 - val_accuracy: 0.7351 - val_loss: 0.5085 - learning_rate: 7.7511e-05\n",
      "Epoch 69/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.7804 - loss: 0.4417 - val_accuracy: 0.7351 - val_loss: 0.5074 - learning_rate: 7.7511e-05\n",
      "Epoch 70/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7883 - loss: 0.3839 - val_accuracy: 0.7401 - val_loss: 0.5064 - learning_rate: 7.7511e-05\n",
      "Epoch 71/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.8355 - loss: 0.3533 - val_accuracy: 0.7401 - val_loss: 0.5062 - learning_rate: 5.4258e-05\n",
      "Epoch 72/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7890 - loss: 0.4189 - val_accuracy: 0.7401 - val_loss: 0.5054 - learning_rate: 5.4258e-05\n",
      "Epoch 73/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8222 - loss: 0.3231 - val_accuracy: 0.7376 - val_loss: 0.5048 - learning_rate: 5.4258e-05\n",
      "Epoch 74/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.8359 - loss: 0.3396 - val_accuracy: 0.7376 - val_loss: 0.5046 - learning_rate: 5.4258e-05\n",
      "Epoch 75/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8399 - loss: 0.3716 - val_accuracy: 0.7351 - val_loss: 0.5042 - learning_rate: 5.4258e-05\n",
      "Epoch 76/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8644 - loss: 0.3173 - val_accuracy: 0.7327 - val_loss: 0.5037 - learning_rate: 3.7980e-05\n",
      "Epoch 77/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.8346 - loss: 0.3843 - val_accuracy: 0.7277 - val_loss: 0.5033 - learning_rate: 3.7980e-05\n",
      "Epoch 78/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.8323 - loss: 0.3194 - val_accuracy: 0.7252 - val_loss: 0.5031 - learning_rate: 3.7980e-05\n",
      "Epoch 79/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8006 - loss: 0.4155 - val_accuracy: 0.7351 - val_loss: 0.5022 - learning_rate: 3.7980e-05\n",
      "Epoch 80/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7500 - loss: 0.5005 - val_accuracy: 0.7351 - val_loss: 0.5020 - learning_rate: 3.7980e-05\n",
      "Epoch 81/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.8203 - loss: 0.3750 - val_accuracy: 0.7401 - val_loss: 0.5020 - learning_rate: 2.6586e-05\n",
      "Epoch 82/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8153 - loss: 0.3591 - val_accuracy: 0.7401 - val_loss: 0.5022 - learning_rate: 2.6586e-05\n",
      "Epoch 83/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.8061 - loss: 0.3888 - val_accuracy: 0.7426 - val_loss: 0.5022 - learning_rate: 2.6586e-05\n",
      "Epoch 84/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8207 - loss: 0.3773 - val_accuracy: 0.7401 - val_loss: 0.5025 - learning_rate: 2.6586e-05\n",
      "Epoch 85/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7792 - loss: 0.4306 - val_accuracy: 0.7401 - val_loss: 0.5026 - learning_rate: 2.6586e-05\n",
      "Epoch 86/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8564 - loss: 0.3705 - val_accuracy: 0.7401 - val_loss: 0.5030 - learning_rate: 1.8610e-05\n",
      "Epoch 87/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8347 - loss: 0.3278 - val_accuracy: 0.7401 - val_loss: 0.5032 - learning_rate: 1.8610e-05\n",
      "Epoch 88/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7923 - loss: 0.4116 - val_accuracy: 0.7401 - val_loss: 0.5037 - learning_rate: 1.8610e-05\n",
      "Epoch 89/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8109 - loss: 0.4187 - val_accuracy: 0.7376 - val_loss: 0.5039 - learning_rate: 1.8610e-05\n",
      "Epoch 90/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.8202 - loss: 0.3830 - val_accuracy: 0.7426 - val_loss: 0.5042 - learning_rate: 1.8610e-05\n"
     ]
    }
   ],
   "source": [
    "# Learning rate scheduler (reduce the learning rate after each epoch)\n",
    "def lr_schedule(epoch):\n",
    "    return 0.008 * (0.7 ** (epoch // 5))\n",
    "\n",
    "lr_scheduler = LearningRateScheduler(lr_schedule)\n",
    "\n",
    "\n",
    "# Train the model\n",
    "model_training = model.fit(X_train, y_train, validation_split=0.7, epochs=200, \n",
    "                           callbacks=[early_stopping_monitor, lr_scheduler], verbose=1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2204827",
   "metadata": {
    "papermill": {
     "duration": 0.018439,
     "end_time": "2024-12-22T19:14:49.912740",
     "exception": false,
     "start_time": "2024-12-22T19:14:49.894301",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Visualize training and validation loss**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d30328f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-22T19:14:49.951930Z",
     "iopub.status.busy": "2024-12-22T19:14:49.951509Z",
     "iopub.status.idle": "2024-12-22T19:14:50.417932Z",
     "shell.execute_reply": "2024-12-22T19:14:50.416935Z"
    },
    "papermill": {
     "duration": 0.488391,
     "end_time": "2024-12-22T19:14:50.420064",
     "exception": false,
     "start_time": "2024-12-22T19:14:49.931673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot training and validation loss\n",
    "plt.plot(model_training.history['val_loss'], 'r', label='Validation Loss')\n",
    "plt.plot(model_training.history['loss'], 'b', label='Training Loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Training and Validation Loss')\n",
    "plt.xticks(np.arange(0, len(model_training.history['loss']), step=2))\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5174b92",
   "metadata": {
    "papermill": {
     "duration": 0.019339,
     "end_time": "2024-12-22T19:14:50.459373",
     "exception": false,
     "start_time": "2024-12-22T19:14:50.440034",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Save the trained model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "07f3e8c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-22T19:14:50.500218Z",
     "iopub.status.busy": "2024-12-22T19:14:50.499825Z",
     "iopub.status.idle": "2024-12-22T19:14:50.550486Z",
     "shell.execute_reply": "2024-12-22T19:14:50.549663Z"
    },
    "papermill": {
     "duration": 0.073766,
     "end_time": "2024-12-22T19:14:50.552936",
     "exception": false,
     "start_time": "2024-12-22T19:14:50.479170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.save('Diabetes_model.h5')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ce9ddb6",
   "metadata": {
    "papermill": {
     "duration": 0.019416,
     "end_time": "2024-12-22T19:14:50.592729",
     "exception": false,
     "start_time": "2024-12-22T19:14:50.573313",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Load the saved model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e7b99b33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-22T19:14:50.633745Z",
     "iopub.status.busy": "2024-12-22T19:14:50.633321Z",
     "iopub.status.idle": "2024-12-22T19:14:50.731319Z",
     "shell.execute_reply": "2024-12-22T19:14:50.730466Z"
    },
    "papermill": {
     "duration": 0.120712,
     "end_time": "2024-12-22T19:14:50.733205",
     "exception": false,
     "start_time": "2024-12-22T19:14:50.612493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"functional_1\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,152</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_2           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">66</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)              │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │         \u001b[38;5;34m1,152\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │           \u001b[38;5;34m256\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │         \u001b[38;5;34m2,080\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_2           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │           \u001b[38;5;34m128\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)              │            \u001b[38;5;34m66\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,452</span> (48.64 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m12,452\u001b[0m (48.64 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,002</span> (46.88 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m12,002\u001b[0m (46.88 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">448</span> (1.75 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m448\u001b[0m (1.75 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2</span> (12.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Optimizer params: \u001b[0m\u001b[38;5;34m2\u001b[0m (12.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = load_model('Diabetes_model.h5')\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2972930c",
   "metadata": {
    "papermill": {
     "duration": 0.019574,
     "end_time": "2024-12-22T19:14:50.772959",
     "exception": false,
     "start_time": "2024-12-22T19:14:50.753385",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Make predictions on the test set**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2ee3491d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-22T19:14:50.813183Z",
     "iopub.status.busy": "2024-12-22T19:14:50.812794Z",
     "iopub.status.idle": "2024-12-22T19:14:50.971162Z",
     "shell.execute_reply": "2024-12-22T19:14:50.969909Z"
    },
    "papermill": {
     "duration": 0.181017,
     "end_time": "2024-12-22T19:14:50.973272",
     "exception": false,
     "start_time": "2024-12-22T19:14:50.792255",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step \n",
      "[0.33109096 0.06531977 0.0278922  0.20423849 0.4785376  0.41310665\n",
      " 0.01170992 0.43127203 0.6338382  0.60839045 0.2766679  0.86713904\n",
      " 0.31261712 0.38391805 0.07211971 0.40858987 0.07720173 0.03999131\n",
      " 0.7596065  0.4152008  0.29848337 0.07595695 0.5549917  0.0384411\n",
      " 0.5185835  0.8803938  0.09130678 0.02594687 0.07811554 0.19182853\n",
      " 0.82141674 0.6533661  0.7757961  0.6951638  0.4593819  0.76020265\n",
      " 0.96939415 0.39628467 0.5160976  0.47466502 0.053169   0.5361423\n",
      " 0.540438   0.22603138 0.01558799 0.59983635 0.61809856 0.11399537\n",
      " 0.44971657 0.83712524 0.01827553 0.7422465  0.73104215 0.14211623\n",
      " 0.05043333 0.0208244  0.66260004 0.0142472  0.40443516 0.69390416\n",
      " 0.7737417  0.25891507 0.4540991  0.30941904 0.03672291 0.65791684\n",
      " 0.02964325 0.39573804 0.03786036 0.35221356 0.6599052  0.05913645\n",
      " 0.30037582 0.0479661  0.04757275 0.5377634  0.38845336 0.33519414\n",
      " 0.10148317 0.06156804 0.6583051  0.13282697 0.0838851  0.3363871\n",
      " 0.1843169  0.78869283 0.8053239  0.31869286 0.09049369 0.03393088\n",
      " 0.04784854 0.05424688 0.0109671  0.4505349  0.37763172 0.6623459\n",
      " 0.32079417 0.08892372 0.3117571  0.06523772 0.7494337  0.02860434\n",
      " 0.54964095 0.46896392 0.62222975 0.14863239 0.38541603 0.7971982\n",
      " 0.20369934 0.59541655 0.0462479  0.44096732 0.04582633 0.78378415\n",
      " 0.13462855 0.30611384 0.7915291  0.1125728  0.02325749 0.45468342\n",
      " 0.02148507 0.36653385 0.27070415 0.1183886  0.21598352 0.45655933\n",
      " 0.12327186 0.8589637  0.7849941  0.8544594  0.80863464 0.80509824\n",
      " 0.05974332 0.5804574  0.73108906 0.05839188 0.04325259 0.71928114\n",
      " 0.7607828  0.00815344 0.0589341  0.01880544 0.16389956 0.16774744\n",
      " 0.04523783 0.18402028 0.24184476 0.01051244 0.35337955 0.735163\n",
      " 0.1814551  0.35313296 0.23391488 0.24698016 0.01697468 0.62300706\n",
      " 0.36109033 0.59643006 0.4999809  0.0705774  0.47555867 0.7388962\n",
      " 0.18278658 0.00843753 0.09924785 0.7339441  0.0172035  0.31105727\n",
      " 0.77946264 0.5185549  0.6535749  0.19875751 0.26719135 0.40213346\n",
      " 0.38840565 0.08077021 0.1878079  0.3565734  0.32234076 0.2918126\n",
      " 0.64841163 0.39625433 0.19367024 0.6568252  0.55257505 0.06069098\n",
      " 0.01820001 0.09867976 0.8296194  0.503646   0.05273252 0.0365961 ]\n"
     ]
    }
   ],
   "source": [
    "# Make predictions on the test set\n",
    "predictions = model.predict(X_test)\n",
    "\n",
    "# Display the probabilities for class \"1\" (indicating diabetic)\n",
    "print(predictions[:, 1])"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 228,
     "sourceId": 482,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 31.245002,
   "end_time": "2024-12-22T19:14:52.516490",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-22T19:14:21.271488",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
